// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    
    // shared
    Not16(in=x, out=notx);
    Not16(in=y, out=noty);
    
    // select x
    // zx nx  out
    // 0  0   x
    // 0  1   !x
    // 1  0   0
    // 1  1   !0 = 1111111111111111 
    Mux4Way16(a=x, b=notx, c[0..15]=false, d[0..15]=true, sel[1]=zx, sel[0]=nx, out=xx);
    
    // select y
    // zy ny  out
    // 0  0   y
    // 0  1   !y
    // 1  0   0
    // 1  1   !0 = 1111111111111111 
    Mux4Way16(a=y, b=noty, c[0..15]=false, d[0..15]=true, sel[1]=zy, sel[0]=ny, out=yy);

    // f no  out
    // 0 0   x & y 
    // 0 1   !(x&y)
    // 1 0   x + y
    // 1 1   !(x+y)
    And16(a=xx, b=yy, out=xandy);
    Not16(in=xandy, out=notxandy);
    Add16(a=xx, b=yy, out=xaddy);
    Not16(in=xaddy, out=notxaddy);
    Mux4Way16(a=xandy, b=notxandy, c=xaddy, d=notxaddy, sel[1]=f, sel[0]=no, out=out, out[15]=ng, out[0..7]=lowout, out[8..15]=highout);

    // if out = 0000000000000000
    Or8Way(in=lowout, out=anylow);
    Or8Way(in=highout, out=anyhigh);
    Or(a=anylow, b=anyhigh, out=any);
    Not(in=any, out=zr);

}