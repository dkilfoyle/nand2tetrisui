
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    // c instruction
    // 1  xx  a   c1 c2 c3 c4 c5 c6   d1 d2 d3   j1 j2 j1
    // 15    12   11 10 09 08 07 06   05 04 03   02 01 00

    // d1 d2 d3
    //  A  D  M
    //  0  0  0  null
    //  0  0  1  M      Memory[A]
    //  0  1  0  D      D
    //  0  1  1  MD     Memory[A] and D
    //  1  0  0  A
    //  1  0  1  AM     A register and Memory[A]
    //  1  1  0  AD     A register and D register
    //  1  1  1  AMD    A register and Memory[A] and D register
   
    // A register = instruction if A-instruction (instruction[15]==0) or ALUOut if destination A (d1==T)
    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=ALUorAInstr);
    Not(in=instruction[15], out=isAInstr);
    Or(a=isAInstr, b=instruction[5], out=cLoadA); // instruction[5]
    ARegister(in=ALUorAInstr, load=cLoadA, out=A);

    // D register = ALUOut if destination D (d2==T)
    DRegister(in=ALUOut, load=instruction[4], out=D);

    // ALU y = A when 
    Mux16(a=inM, b=A, sel=false, out=AorInM);


    ALU(x=D, y=AorInM, zx=false, nx=false, zy=false, ny=false, f=false, no=false, out=ALUOut);
   
    PC(in=A, inc=true, load=false, reset=reset, out[0..14]=pc);

}